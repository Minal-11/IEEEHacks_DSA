---------------------------------------------Trie implementation-------------------------------------------------
Trie is a type of k-ary search tree used for storing and searching a specific key from a set. Using Trie, search complexities can be brought to optimal limit (key length). Trie is also known as digital tree or prefix tree.

->Structure of Trie node:
Every node of Trie consists of multiple branches. Each branch represents a possible character of keys. 
// Trie node
class TrieNode
{
	TrieNode[] children = new TrieNode[ALPHABET_SIZE];
	// isEndOfWord is true if the node
	// represents end of a word
	boolean isEndOfWord;
}

Insert Operation in Trie:
Inserting a key into Trie is a simple approach. 
•	Every character of the input key is inserted as an individual Trie node. Note that the children is an array of pointers (or references) to next-level trie nodes. 
•	The key character acts as an index to the array children. 
•	If the input key is new or an extension of the existing key, construct non-existing nodes of the key, and mark the end of the word for the last node. 
•	If the input key is a prefix of the existing key in Trie, Simply mark the last node of the key as the end of a word. 

Search Operation in Trie:
Searching for a key is similar to the insert operation. However, It only compares the characters and moves down. The search can terminate due to the end of a string or lack of key in the trie. 
•	In the former case, if the isEndofWord field of the last node is true, then the key exists in the trie. 
•	In the second case, the search terminates without examining all the characters of the key, since the key is not present in the trie.
How to implement a Trie Data Structure?
•	Create a root node with the help of TrieNode() constructor.
•	Store a collection of strings that have to be inserted in the trie in a vector of strings say, arr.
•	Inserting all strings in Trie with the help of the insert() function,
•	Search strings with the help of search() function.

// Java implementation of search and insert operations
// on Trie
<code>
public class Trie {
	
	// Alphabet size (# of symbols)
	static final int ALPHABET_SIZE = 26;
	
	// trie node
	static class TrieNode
	{
		TrieNode[] children = new TrieNode[ALPHABET_SIZE];
	
		// isEndOfWord is true if the node represents
		// end of a word
		boolean isEndOfWord;
		
		TrieNode(){
			isEndOfWord = false;
			for (int i = 0; i < ALPHABET_SIZE; i++)
				children[i] = null;
		}
	};
	
	static TrieNode root;
	
	// If not present, inserts key into trie
	// If the key is prefix of trie node,
	// just marks leaf node
	static void insert(String key)
	{
		int level;
		int length = key.length();
		int index;
	
		TrieNode pCrawl = root;
	
		for (level = 0; level < length; level++)
		{
			index = key.charAt(level) - 'a';
			if (pCrawl.children[index] == null)
				pCrawl.children[index] = new TrieNode();
	
			pCrawl = pCrawl.children[index];
		}
	
		// mark last node as leaf
		pCrawl.isEndOfWord = true;
	}
	
	// Returns true if key presents in trie, else false
	static boolean search(String key)
	{
		int level;
		int length = key.length();
		int index;
		TrieNode pCrawl = root;
	
		for (level = 0; level < length; level++)
		{
			index = key.charAt(level) - 'a';
	
			if (pCrawl.children[index] == null)
				return false;
	
			pCrawl = pCrawl.children[index];
		}
	
		return (pCrawl.isEndOfWord);
	}
	
	// Driver
	public static void main(String args[])
	{
		// Input keys (use only 'a' through 'z' and lower case)
		String keys[] = {"the", "a", "there", "answer", "any",
						"by", "bye", "their"};
	
		String output[] = {"Not present in trie", "Present in trie"};
	
	
		root = new TrieNode();
	
		// Construct trie
		int i;
		for (i = 0; i < keys.length ; i++)
			insert(keys[i]);
	
		// Search for different keys
		if(search("the") == true)
			System.out.println("the --- " + output[1]);
		else System.out.println("the --- " + output[0]);
		
		if(search("these") == true)
			System.out.println("these --- " + output[1]);
		else System.out.println("these --- " + output[0]);
		
		if(search("their") == true)
			System.out.println("their --- " + output[1]);
		else System.out.println("their --- " + output[0]);
		
		if(search("thaw") == true)
			System.out.println("thaw --- " + output[1]);
		else System.out.println("thaw --- " + output[0]);
		
	}
}

Output
the --- Present in trie
these --- Not present in trie
their --- Present in trie
thaw --- Not present in trie

operation	 Time Complexity	Auxiliary Space
Insertion 	  O(n)	          O(n*m)
Searching	    O(n)            O(1)





Refernce -geeksforgeeks

Thank you!
