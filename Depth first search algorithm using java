--------------DFS ALGORITHM ----------
#BASIC EXPLAINATION
Depth first Search or Depth first traversal is a recursive algorithm for searching all the vertices/nodes of a graph or tree data structure. Traversal means visiting all the nodes of a graph.
# Application of dfs?
o	It can be used to find the paths between two vertices.
o	It can also be used to detect cycles in the graph.
o	DFS algorithm can be used to implement the topological sorting.

Lets usnderstand the approach :
1.	Start with a random or any vertix/ node from graph
2.	Make an array to keep track of visited nodes, once visited marked that node as visited
3.	Print this current node
4.	Get neighbour/adjacent nodes and repeat above 2 and 3 steps recursively for each node depthly if node is unvisited.


<code>
import java.util.*;
class Solution
{
    public static void dfs(int node, boolean vis[], ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> storeDfs) {
        storeDfs.add(node);
        //marking current node as visited
        vis[node] = true;

        //getting neighbour nodes
        for(Integer it: adj.get(node)) {
            if(vis[it] == false) {
                dfs(it, vis, adj, storeDfs);
            }
        }
    }
    public static ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj)
    {
        ArrayList<Integer> storeDfs = new ArrayList<>();

        //boolean array to keep track of visited vertices
        boolean vis[] = new boolean[V+1];

        //If you are starting from node 2, then i should start from 2.
        for(int i = 1;i<=V;i++) {
            if(!vis[i]) dfs(i, vis, adj, storeDfs);
}
return storeDfs;
    }
    static void printAns(ArrayList < Integer > ans) {
        for (int i = 0; i < ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
    }
    public static void main(String args[]) {

        ArrayList < ArrayList < Integer >> adj = new ArrayList < > ();

        // adding new arraylists to 'adj' to add neighbour nodes
        for (int i = 0; i < 6; i++) {
            adj.add(new ArrayList < > ());
        }

        adj.get(1).add(2);
        adj.get(1).add(3);
        adj.get(1).add(4);
        adj.get(1).add(5);
        adj.get(2).add(4);
        adj.get(2).add(1);
        adj.get(3).add(1);
        adj.get(4).add(1);
        adj.get(4).add(2);
        adj.get(5).add(1);

        ArrayList < Integer > ans = dfsOfGraph(5, adj);
        printAns(ans);
    }
}

Output of the code
12345

Time complexity:o(n+e) Where N is the time taken for visiting N nodes and E is for travelling through adjacent nodes.


