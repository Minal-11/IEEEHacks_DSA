------------------------------------Prefix Sum Array------------------------------------------------------
Prefix Sum Array
we can use prefix sums as an alternative approach to the same problem. Prefix sums is a simple yet powerful technique that we can use to easily calculate the sum of a segment or an array.
It requires a linear time preprocessing and is widely used due to its simplicity and effectiveness.

applications like:
1.	Find sum of all elements in a given range
2.	Find product of all elements in a given range
3.	Find maximum subarray sum
4.	Find maximum subarray sum modulo m
5.	Maximum subarray such that sum is less than some number
Note Prefix array is majorly used to find sum of elements in an interval or in Kadane's algorithm.

Pseudocode
Building the prefix array
code-
function build(array[]):
    n = array.length
    prefix_array = {0, 0 ...n times... 0}

    prefix_array[0] = array[0]
    for i = 1 to n:
        prefix_array[i] = ar[i] + prefix_array[i - 1]
    return prefix_array	
To find sum of elements in an interval
code-
function rangeSum(L, R):
    if L == 0:
        return prefix_array[R]
    else:
        return (prefix_array[R] - prefix_array[L - 1])
To find subarray with maximum sum
code-
function build(array[]):
    n = array.length
    prefix_array = {0, 0 ...n times... 0}

    prefix_array[0] = array[0]
    for i = 1 to n:
        prefix_array[i] = ar[i] + prefix_array[i - 1]
        
        <code>
* Prefix sum tree to find sum of a given range

#include <iostream>
#include <vector>

std::vector<int> build(const std::vector<int> &array){
    int n = array.size();
    std::vector<int> prefix_array(n, 0);
    prefix_array[0] = array[0];
    for(int i = 1; i < n; ++i)
        prefix_array[i] = array[i] + prefix_array[i - 1];
    return prefix_array;
}

int rangeSum(const std::vector<int> &prefix_array, int L, int R){
    if(L == 0)
        return prefix_array[R];
    else
        return (prefix_array[R] - prefix_array[L - 1]);
}

int main() {
    std::vector<int> ar = {1, 2, 3, 4, 5};
    std::cout << "Array is\n";
    for(int i = 0; i < 5; ++i)
        std::cout << ar[i] << ' ';
    std::cout << '\n';
    std::vector<int> prefix_array = build(ar);
    std::cout << "Sum of elements in interval [0, 3] = "
              << rangeSum(prefix_array, 0, 3) << '\n';
    return 0;
}

s.c-Space complexity : O(n)
t.c-Worst case time complexities
•	Build : O(n)
•	Range sum query : O(1)
Where n is the length of array.

Thank you!
