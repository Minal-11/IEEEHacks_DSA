-----------------------------------------------------Floyd’s Cycle Detection Algorithm(Slow and fast pointer technique)-------------------------------------------------
The Slow & Fast Pointer approach is the second pattern that will come in handy when working on Linked list problems.
Appilcation-
1. Find Middle of Linked List 
2. Find Kth-node from last 
3. Detect a cycle in Linked List

implementation
Floyd’s cycle detection algorithm is a pointer algorithm that uses only two pointers, which move through the sequence at different speeds. 
The idea is to move the fast pointer twice as quickly as the slow pointer, and the distance between them increases by one at each step.
 If we both meet at some point, we have found a cycle in the list; otherwise, no cycle is present if the end of the list is reached. It is also called the “tortoise and the hare algorithm”.

the algorithm can be implemented as follows in Java
<Code>
// A Linked List Node
class Node
{
    int data;
    Node next;
 
    Node(int data, Node next)
    {
        this.data = data;
        this.next = next;
    }
}
 
class Main
{
    // Function to detect a cycle in a linked list using
    // Floyd’s cycle detection algorithm
    public static boolean detectCycle(Node head)
    {
        // take two references – `slow` and `fast`
        Node slow = head, fast = head;
 
        while (fast != null && fast.next != null)
        {
            // move slow by one
            slow = slow.next;
 
            // move fast by two
            fast = fast.next.next;
  // if they meet any node, the linked list contains a cycle
            if (slow == fast) {
                return true;
            }
        }
 
        // we reach here if slow and fast do not meet
        return false;
    }
 
    public static void main(String[] args)
    {
        // input keys
        int[] keys = { 1, 2, 3, 4, 5 };
 
        Node head = null;
        for (int i = keys.length - 1; i >= 0; i--) {
            head = new Node(keys[i], head);
        }
 
        // insert cycle
        head.next.next.next.next.next = head.next.next;
 
        if (detectCycle(head)) {
            System.out.println("Cycle Found");
        }
        else {
            System.out.println("No Cycle Found");
        }
 }
}
Output:

Cycle Found
The time complexity of the above solution is O(n), where n is the total number of nodes in the linked list, and doesn’t require any extra space.

hope you liked it!
